import * as React from 'react'
// üê® voc√™ vai precisar dos seguintes itens de '../pokemon':
// fetchPokemon: a fun√ß√£o que retorna as informa√ß√µes do pok√©mon
// PokemonInfoFallback: o que √© exibido enquanto as informa√ß√µes do pok√©mon
// s√£o carregadas
// PokemonDataView: o componente usado para exibir as informa√ß√µes do pok√©mon
import { PokemonForm, fetchPokemon, PokemonInfoFallback, PokemonDataView } from '../pokemon'

function PokemonInfo({ pokemonName }) {
  // üê® crie o estado para o pok√©mon (null)
  const [pokemon, setPokemon] = React.useState(null)
  const [error, setError] = React.useState(null)
  const [status, setStatus] = React.useState('idle')

  // üê® crie React.useEffect de modo a ser chamado sempre que pokemonName mudar.
  // üí∞ N√ÉO SE ESQUE√áA DO VETOR DE DEPEND√äNCIAS!
  React.useEffect(() => {
    requestPokemon()
  }, [pokemonName])

  async function requestPokemon() {

    // üí∞ se pokemonName √© falso (ou uma string vazia) n√£o se preocupe em fazer 
    // a requisi√ß√£o (retorne precocemente).
    if (!pokemonName) return

    // üê® antes de chamar `fetchPokemon`, limpe o estado atual do pokemon
    // ajustando-o para null.
    setPokemon(null)
    setError(null)
    setStatus('idle')   // Aguardando a√ß√£o do usu√°rio

    try {

      // Vamos disparar a requisi√ß√£o, e o resultado ficar√° pendente
      setStatus('pending')

      // (Isso √© para habilitar o estado de carregamento ao alternar entre diferentes
      // pok√©mon.)
      // üí∞ Use a fun√ß√£o `fetchPokemon` para buscar um pok√©mon pelo seu nome:
      const pokemonData = await fetchPokemon(pokemonName)   // 1

      // Atualiza a vari√°vel de estado com as informa√ß√µes obtidas
      setPokemon(pokemonData)   // 2

      // Solicita√ß√£o resolvida com sucesso!
      setStatus('resolved')
    }
    catch (error) {
      //alert(error.message)
      setError(error)

      // A solicita√ß√£o foi rejeitada por algum motivo
      setStatus('rejected')
    }

  }

  // üê® retorne o seguinte baseado nos estados `pokemon` e `pokemonName`:
  //   1. n√£o h√° pokemonName: 'Informe um pok√©mon'
  //   2. tem pokemonName mas n√£o pokemon: <PokemonInfoFallback name={pokemonName} />
  //   3. tem pokemon: <PokemonDataView pokemon={pokemon} />
  // if(error) return (
  //   <div role="alert">
  //     Ocorreu um erro: {error.message}
  //   </div>
  // )
  // else if(! pokemonName) return 'Informe um pok√©mon'
  // else if(pokemonName && !pokemon) return <PokemonInfoFallback name={pokemonName} />
  // else if(pokemon) return <PokemonDataView pokemon={pokemon} />

  switch (status) {
    case 'idle':        // Aguardando a√ß√£o do usu√°rio
      return 'Informe um pok√©mon'

    case 'pending':     // Aguardando a resolu√ß√£o da requisi√ß√£o
      return <PokemonInfoFallback name={pokemonName} />

    case 'resolved':    // Requisi√ß√£o resolvida com sucesso
      return <PokemonDataView pokemon={pokemon} />

    default:    // case 'rejected':    // Requisi√ß√£o deu erro
      return (
        <div role="alert">
          Ocorreu um erro: {error.message}
        </div>
      )

  }

}

function Exercicio06() {
  const [pokemonName, setPokemonName] = React.useState('')

  function handleSubmit(newPokemonName) {
    setPokemonName(newPokemonName)
  }

  return (
    <div className="pokemon-info-app">
      <PokemonForm pokemonName={pokemonName} onSubmit={handleSubmit} />
      <hr />
      <div className="pokemon-info">
        <PokemonInfo pokemonName={pokemonName} />
      </div>
    </div>
  )
}

export default Exercicio06